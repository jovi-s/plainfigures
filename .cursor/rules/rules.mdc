---
name: SME Finance Assistant Rules (MVP)
description: Project-wide rules/spec guiding the AI when coding in this repo. Prioritize multi-agent design, code-does-math, and clear separation between extraction and computation.
alwaysApply: false
---
SME Finance Assistant (Langgraph + LLM) — MVP Spec (Multi-Modal)

Goal (MVP in 1 month):  
A lightweight, multilingual web app for Southeast Asian SMEs to record transactions, categorize expenses, generate invoices (PDF), and summarize cash flow—using multi-agent orchestration (Langgraph), LLM for local-language understanding, gpt-4o-mini for extracting information from iamges, and gpt-4o-mini for voice transcription. Supports text, image, and voice input. Data is displayed in a modern frontend.

⸻

1) Scope & Success Criteria

In-scope (MVP)
- Cashflow capture (chat, form, image, or voice):
	- Natural-language entry (e.g., “Sold 500k IDR to PT Sari on 5 Aug, COD”).
	- File upload for receipt/invoice photos/PDFs → GPT-4o mini model → auto-extract totals, dates, vendor, line items; user can edit.
	- Voice input: audio file or real-time stream → gpt-4o-mini-transcribe model → transcript → process as text.
- Expense management: categorize (COGS, rent, wages, utilities, taxes, misc), export CSV.
- Invoice generation: create/send branded PDF invoices (sequential IDs, due dates, tax, currency), store & re-issue.
- Modern UX: Displays cash flow, expenses in a simple, and easy to understand manner.
- Basic summaries: daily/weekly/monthly net cashflow, top expense categories, upcoming receivables.
- User profile agent: stores language, preferences, and recent activity.

Success
- Record a transaction via chat, upload, or voice in <10s; extraction accuracy ≥90% on pilot docs.
- Generate a PDF invoice with correct totals/taxes/currency in <5s - if the user clicks on the generate invoice button,
- Low hallucination: numeric calculations executed by code, not LLM.
- All responses available in user’s chosen SEA language.
- Data displayed in frontend tables, charts, and summary widgets.

⸻

2) System Overview (Multi-Modal)

Use a local-first method for a database to start the project. 
No GCP dependency for MVP. Enables rapid iteration and privacy.

High-level

Web (Next.js) ─► FastAPI/Langraph backend  

Input modalities:
- Text: chat/form (LLM, GPT-4o mini)
- Image/PDF: upload (local OCR, GPT-4o mini for image understanding)
- Audio: upload/stream (gpt-4o-mini-transcribe, then text pipeline)

All data is displayed in the frontend: tables (transactions, invoices), charts (cashflow), and summaries.

⸻

3) Agents & Tools (Langgraph)

⸻

4) Models & Integration

- GPT-4o mini: for image and text input, especially for receipts/invoices (via OpenAI API).
- Audio: gpt-4o-mini-transcribe for voice input.

⸻

5) Data Model (MVP)

transactions  
id, ts, type(income|expense), amount, currency, category, counterparty, method, notes, source_doc_uri, doc_confidence, created_by

invoices (header)  
id, invoice_no, issue_date, due_date, currency, customer_name, customer_addr, subtotal, tax, total, status(draft|sent|paid|overdue), pdf_uri

invoice_lines  
id, invoice_id, description, qty, unit_price, tax_rate, line_total

categories  
id, name, description, tax_treatment

user_profiles  
id, user_id, language, preferences, recent_activity

⸻

6) Prompts (initial)

Keep numbers out of LLM math. LLM extracts → backend computes.

⸻

7) Acceptance Tests

1. Upload receipt (image/PDF) → expense row appears with correct amount/currency/date/vendor; user can edit; CSV export matches UI.
2. Create invoice via chat or voice → PDF file with accurate totals/tax; stored in DB; status=sent.
3. Monthly summary with correct arithmetic (double-check totals vs. DB).
4. Audio input (record/upload) → transcript processed as transaction; accuracy ≥90%.
